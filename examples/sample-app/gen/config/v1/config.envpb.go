// Code generated by protoc-gen-env. DO NOT EDIT.
// Version: unknown, (unknown, unknown)
// Runtime version: 2

package configv1

import (
	fmt "fmt"
	runtime "github.com/marnixbouhuis/confpb/pkg/runtime"
	scan "github.com/marnixbouhuis/confpb/pkg/runtime/scan"
)

const (
	// Make sure that the generated code version is supported by the installed runtime.
	// If this compile time check fails, re-generated the code with a newer version of protoc-gen-env.
	_ = runtime.EnforceVersion(2 - runtime.MinimumSupportedCodegenVersion)
	// Make sure that the installed runtime is sufficiently up-to-date for this generated code.
	// If this compile time check fails, update the runtime package.
	_ = runtime.EnforceVersion(runtime.Version - 2)
)

func ApplicationConfig_ServerConfigFromEnv() (*ApplicationConfig_ServerConfig, error) {
	m, _, err := ApplicationConfig_ServerConfigFromEnvWithPrefix("")
	return m, err
}

func ApplicationConfig_ServerConfigFromEnvWithPrefix(prefix string) (x *ApplicationConfig_ServerConfig, fieldsPresent bool, err error) {
	if prefix != "" {
		prefix = prefix + "_"
	}

	if hasKey := runtime.HasEnvKeyWithPrefix(prefix); !hasKey {
		return nil, false, nil
	}

	x = &ApplicationConfig_ServerConfig{}
	{
		result, hasResult, err := scan.String(prefix + "HOST")
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"Host\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.Host = &result
		}
	}
	{
		result, hasResult, err := scan.Uint32(prefix + "PORT")
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"Port\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.Port = &result
		}
	}
	return x, fieldsPresent, nil
}

var _ scan.Scanner[*ApplicationConfig_ServerConfig] = ApplicationConfig_ServerConfigFromEnvWithPrefix

func ApplicationConfigFromEnv() (*ApplicationConfig, error) {
	m, _, err := ApplicationConfigFromEnvWithPrefix("")
	return m, err
}

func ApplicationConfigFromEnvWithPrefix(prefix string) (x *ApplicationConfig, fieldsPresent bool, err error) {
	if prefix != "" {
		prefix = prefix + "_"
	}

	if hasKey := runtime.HasEnvKeyWithPrefix(prefix); !hasKey {
		return nil, false, nil
	}

	x = &ApplicationConfig{}
	{
		result, hasResult, err := ApplicationConfig_ServerConfigFromEnvWithPrefix(prefix + "SERVER")
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"Server\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.Server = result
		}
	}
	{
		result, hasResult, err := scan.Repeated(prefix+"SOME_LIST", scan.String)
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"SomeList\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.SomeList = result
		}
	}
	{
		result, hasResult, err := scan.Repeated(prefix+"SERVER_LIST", ApplicationConfig_ServerConfigFromEnvWithPrefix)
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"ServerList\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.ServerList = result
		}
	}
	{
		result, hasResult, err := scan.Duration(prefix + "SOME_DURATION")
		if err != nil {
			return nil, false, fmt.Errorf("error scanning field \"SomeDuration\": %w", err)
		}
		if hasResult {
			fieldsPresent = true
			x.SomeDuration = result
		}
	}
	return x, fieldsPresent, nil
}

var _ scan.Scanner[*ApplicationConfig] = ApplicationConfigFromEnvWithPrefix
